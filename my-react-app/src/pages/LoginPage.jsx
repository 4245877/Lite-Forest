// src/pages/LoginPage.jsx
import React, { useState } from 'react';
import styles from './LoginPage.module.css';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫–∏ –¥–ª—è UI
import { FaEye, FaEyeSlash } from 'react-icons/fa';

// --- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞ ---
const LoginForm = ({ onToggleForm }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);

  const isFormValid = email.includes('@') && password.length > 0;

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!isFormValid) return;

    setLoading(true);
    setError('');

    // --- –ò–ú–ò–¢–ê–¶–ò–Ø –ó–ê–ü–†–û–°–ê –ö –°–ï–†–í–ï–†–£ ---
    // –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–û–¢ –ö–û–î –†–ï–ê–õ–¨–ù–´–ú –í–´–ó–û–í–û–ú API
    await new Promise(resolve => setTimeout(resolve, 1500));
    if (email === "test@example.com" && password === "password123") {
      alert('–£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥!');
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    } else {
      setError('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π email –∞–±–æ –ø–∞—Ä–æ–ª—å.');
    }
    // ------------------------------------

    setLoading(false);
  };

  return (
    <form onSubmit={handleSubmit}>
      <h2 className={styles.formTitle}>–í—Ö—ñ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç</h2>

      {error && <div className={styles.serverError}>{error}</div>}

      <div className={styles.inputGroup}>
        <label htmlFor="login-email" className={styles.inputLabel}>Email</label>
        <input
          id="login-email"
          type="email"
          className={styles.input}
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          aria-label="–ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ email"
          required
        />
      </div>

      <div className={styles.inputGroup}>
        <label htmlFor="login-password" className={styles.inputLabel}>–ü–∞—Ä–æ–ª—å</label>
        <input
          id="login-password"
          type={showPassword ? 'text' : 'password'}
          className={styles.input}
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          aria-label="–ü–æ–ª–µ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è"
          required
        />
        <span
          className={styles.passwordToggle}
          onClick={() => setShowPassword(!showPassword)}
          aria-label={showPassword ? "–ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –ø–∞—Ä–æ–ª—å" : "–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–∞—Ä–æ–ª—å"}
        >
          {showPassword ? <FaEyeSlash /> : <FaEye />}
        </span>
      </div>
      
      <div className={styles.linkGroup}>
          <a href="#" className={styles.formLink}>–ó–∞–±—É–ª–∏ –ø–∞—Ä–æ–ª—å?</a>
      </div>

      <button type="submit" className={styles.submitButton} disabled={!isFormValid || loading}>
        {loading ? '–í—Ö–æ–¥–∏–º–æ...' : '–í—ñ–π—Ç–∏'}
      </button>

      <p className={styles.toggleForm}>
        –ù–µ–º–∞—î –∞–∫–∫–∞—É–Ω—Ç–∞?{' '}
        <a href="#" onClick={onToggleForm} className={styles.formLink}>
          –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è
        </a>
      </p>
    </form>
  );
};

// --- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ---
const RegisterForm = ({ onToggleForm }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [errors, setErrors] = useState({});
  const [loading, setLoading] = useState(false);
  const [serverError, setServerError] = useState('');

  const validateForm = () => {
    const newErrors = {};
    if (!email.includes('@')) newErrors.email = '–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π email.';
    if (password.length < 8) newErrors.password = '–ü–∞—Ä–æ–ª—å –º–∞—î –±—É—Ç–∏ –Ω–µ –º–µ–Ω—à–µ 8 —Å–∏–º–≤–æ–ª—ñ–≤.';
    if (password !== confirmPassword) newErrors.confirmPassword = '–ü–∞—Ä–æ–ª—ñ –Ω–µ –∑–±—ñ–≥–∞—é—Ç—å—Å—è.';
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const isFormValid = email && password && confirmPassword && Object.keys(errors).length === 0;

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!validateForm()) return;

    setLoading(true);
    setServerError('');
    
    // --- –ò–ú–ò–¢–ê–¶–ò–Ø –ó–ê–ü–†–û–°–ê –ö –°–ï–†–í–ï–†–£ ---
    // –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–û–¢ –ö–û–î –†–ï–ê–õ–¨–ù–´–ú –í–´–ó–û–í–û–ú API
    await new Promise(resolve => setTimeout(resolve, 1500));
    // –î–æ–ø—É—Å—Ç–∏–º, email —É–∂–µ –∑–∞–Ω—è—Ç
    if (email === "test@example.com") {
      setServerError('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ–∑ —Ç–∞–∫–∏–º email –≤–∂–µ —ñ—Å–Ω—É—î.');
    } else {
       alert('–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ!');
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞ –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç
    }
    // ------------------------------------

    setLoading(false);
  };

  return (
    <form onSubmit={handleSubmit}>
      <h2 className={styles.formTitle}>–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–∫–∫–∞—É–Ω—Ç–∞</h2>

       {serverError && <div className={styles.serverError}>{serverError}</div>}

      <div className={styles.inputGroup}>
        <label htmlFor="reg-email" className={styles.inputLabel}>Email</label>
        <input
          id="reg-email"
          type="email"
          className={styles.input}
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          onBlur={validateForm}
          aria-label="–ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ email –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
          required
        />
        {errors.email && <p className={styles.errorText}>{errors.email}</p>}
      </div>

      <div className={styles.inputGroup}>
        <label htmlFor="reg-password" className={styles.inputLabel}>–ü–∞—Ä–æ–ª—å</label>
        <input
          id="reg-password"
          type="password"
          className={styles.input}
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          onBlur={validateForm}
          aria-label="–ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
          required
        />
        {errors.password && <p className={styles.errorText}>{errors.password}</p>}
      </div>
      
      <div className={styles.inputGroup}>
        <label htmlFor="reg-confirm-password" className={styles.inputLabel}>–ü—ñ–¥—Ç–≤–µ—Ä–¥—å—Ç–µ –ø–∞—Ä–æ–ª—å</label>
        <input
          id="reg-confirm-password"
          type="password"
          className={styles.input}
          value={confirmPassword}
          onChange={(e) => setConfirmPassword(e.target.value)}
          onBlur={validateForm}
          aria-label="–ü–æ–ª–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è"
          required
        />
        {errors.confirmPassword && <p className={styles.errorText}>{errors.confirmPassword}</p>}
      </div>

      <button type="submit" className={styles.submitButton} disabled={!isFormValid || loading}>
        {loading ? '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...' : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'}
      </button>

      <p className={styles.toggleForm}>
        –í–∂–µ —î –æ–±–ª—ñ–∫–æ–≤–∏–π –∞–∫–∫–∞—É–Ω—Ç?{' '}
        <a href="#" onClick={onToggleForm} className={styles.formLink}>
          –£–≤—ñ–π—Ç–∏
        </a>
      </p>
    </form>
  );
};


// --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
const LoginPage = () => {
  const [isLoginView, setIsLoginView] = useState(true);

  const handleToggleForm = (e) => {
    e.preventDefault();
    setIsLoginView(!isLoginView);
  };

  return (
    <div className={styles.loginPage}>
      {/* –õ–µ–≤–∞—è –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å */}
      <div className={styles.leftPanel}>
        <div className={styles.brandLogo} aria-hidden="true">
          üåø
        </div>
        <h1 className={styles.brandTitle}>Lite Forest</h1>
        <p className={styles.brandSlogan}>
          –í–∞—à –Ω–∞–¥—ñ–π–Ω–∏–π –ø–∞—Ä—Ç–Ω–µ—Ä —É —Å–≤—ñ—Ç—ñ –µ–∫–æ–ª–æ–≥—ñ—á–Ω–æ—ó –ø—Ä–æ–¥—É–∫—Ü—ñ—ó —Ç–∞ —É—Å–≤—ñ–¥–æ–º–ª–µ–Ω–æ–≥–æ —Å–ø–æ–∂–∏–≤–∞–Ω–Ω—è.
        </p>
      </div>

      {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —Ñ–æ—Ä–º–æ–π */}
      <div className={styles.formPanel}>
        <div className={styles.formContainer}>
          {isLoginView ? (
            <LoginForm onToggleForm={handleToggleForm} />
          ) : (
            <RegisterForm onToggleForm={handleToggleForm} />
          )}
        </div>
      </div>
    </div>
  );
};

export default LoginPage;