import React, { useState, useEffect, useMemo, useCallback } from 'react';
import ProductCard from '../components/product/ProductCard';
import SearchBar from '../components/search/SearchBar';
import { highlightMatch } from '../utils/searchUtils';
import './CatalogPage.css';

const staticCategories = [
    '3D –ø—Ä–∏–Ω—Ç–µ—Ä—ã',
    '3D —Å–∫–∞–Ω–µ—Ä—ã',
    '–ß–ü–£ —Å—Ç–∞–Ω–∫–∏',
    '–†–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
    '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã',
    '–ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ',
    '–ó–∞–ø—á–∞—Å—Ç–∏',
];

const CatalogPage = () => {
    // --- –°–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ---
    const [products, setProducts] = useState([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);
    const [totalProducts, setTotalProducts] = useState(0);
    
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    const [selectedCategories, setSelectedCategories] = useState([]);
    const [minPrice, setMinPrice] = useState('');
    const [maxPrice, setMaxPrice] = useState('');
    const [sortBy, setSortBy] = useState('popular');
    const [isFiltersVisible, setIsFiltersVisible] = useState(false);
    const [searchQuery, setSearchQuery] = useState('');
    
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const [currentPage, setCurrentPage] = useState(1);
    const [itemsPerPage] = useState(12);
    const [totalPages, setTotalPages] = useState(1);

    // --- –õ–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –±—ç–∫–µ–Ω–¥–∞ ---
    useEffect(() => {
        const fetchProducts = async () => {
            setIsLoading(true);
            setError(null);
            
            const params = new URLSearchParams();
            if (searchQuery) params.append('search', searchQuery);
            if (selectedCategories.length > 0) params.append('categories', selectedCategories.join(','));
            if (minPrice) params.append('minPrice', minPrice);
            if (maxPrice) params.append('maxPrice', maxPrice);
            if (sortBy) params.append('sortBy', sortBy);
            params.append('page', currentPage);
            params.append('limit', itemsPerPage);

            try {
                const response = await fetch(`/api/products?${params.toString()}`);
                if (!response.ok) {
                    throw new Error('–°–µ—Ç–µ–≤–æ–π –æ—Ç–≤–µ—Ç –±—ã–ª –Ω–µ –≤ –ø–æ—Ä—è–¥–∫–µ');
                }
                const data = await response.json();
                setProducts(data.products || data);
                setTotalProducts(data.total || data.length);
                setTotalPages(Math.ceil((data.total || data.length) / itemsPerPage));
            } catch (err) {
                setError(err.message);
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤:", err);
            } finally {
                setIsLoading(false);
            }
        };

        fetchProducts();
    }, [searchQuery, selectedCategories, minPrice, maxPrice, sortBy, currentPage, itemsPerPage]); 

    // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π ---
    const handleCategoryChange = (category) => {
        setSelectedCategories(prev =>
            prev.includes(category)
            ? prev.filter(c => c !== category)
            : [...prev, category]
        );
        setCurrentPage(1); // –°–±—Ä–æ—Å –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    };

    const handleMinPriceChange = (event) => {
        setMinPrice(event.target.value);
        setCurrentPage(1);
    };

    const handleMaxPriceChange = (event) => {
        setMaxPrice(event.target.value);
        setCurrentPage(1);
    };
    
    const handleSortChange = (event) => {
        setSortBy(event.target.value);
        setCurrentPage(1);
    };

    const handleSearchChange = (query) => {
        setSearchQuery(query);
        setCurrentPage(1);
    };

    const toggleFiltersVisibility = () => setIsFiltersVisible(!isFiltersVisible);

    const clearAllFilters = () => {
        setSelectedCategories([]);
        setMinPrice('');
        setMaxPrice('');
        setSortBy('popular');
        setSearchQuery('');
        setCurrentPage(1);
    };

    const handlePageChange = (page) => {
        setCurrentPage(page);
        window.scrollTo({ top: 0, behavior: 'smooth' });
    };

    // --- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ ---
    const ProductCardWithHighlight = useCallback(({ product, query }) => {
        const highlightedName = useMemo(() => highlightMatch(product.name, query), [product.name, query]);
        const productForCard = { 
            ...product, 
            name: highlightedName, 
            price: product.base_price,
            image: product.media?.find(m => m.media_type === 'image')?.url || 'https://placehold.co/300x300'
        };
        return <ProductCard product={productForCard} />;
    }, []);

    // --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ ---
    const getPageNumbers = () => {
        const pages = [];
        const maxVisiblePages = 5;
        
        if (totalPages <= maxVisiblePages) {
            for (let i = 1; i <= totalPages; i++) {
                pages.push(i);
            }
        } else {
            if (currentPage <= 3) {
                for (let i = 1; i <= 4; i++) {
                    pages.push(i);
                }
                pages.push('...');
                pages.push(totalPages);
            } else if (currentPage >= totalPages - 2) {
                pages.push(1);
                pages.push('...');
                for (let i = totalPages - 3; i <= totalPages; i++) {
                    pages.push(i);
                }
            } else {
                pages.push(1);
                pages.push('...');
                for (let i = currentPage - 1; i <= currentPage + 1; i++) {
                    pages.push(i);
                }
                pages.push('...');
                pages.push(totalPages);
            }
        }
        
        return pages;
    };

    // --- –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ---
    const renderContent = () => {
        if (isLoading) {
            return (
                <div className="loading-container">
                    <div className="loading-spinner"></div>
                    <p>–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã...</p>
                </div>
            );
        }
        
        if (error) {
            return (
                <div className="error-container">
                    <p>‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {error}</p>
                    <button className="retry-button" onClick={() => window.location.reload()}>
                        –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                    </button>
                </div>
            );
        }
        
        if (products.length > 0) {
            return products.map(product => (
                <ProductCardWithHighlight key={product.id} product={product} query={searchQuery} />
            ));
        }
        
        return (
            <div className="empty-state">
                <div className="empty-icon">üîç</div>
                <h3>–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h3>
                <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã</p>
                <button className="clear-filters-button" onClick={clearAllFilters}>
                    –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
                </button>
            </div>
        );
    };

    const renderPagination = () => {
        if (totalPages <= 1) return null;

        const pageNumbers = getPageNumbers();

        return (
            <div className="pagination">
                <button 
                    className="pagination-arrow" 
                    onClick={() => handlePageChange(currentPage - 1)}
                    disabled={currentPage === 1}
                >
                    ‚Üê
                </button>
                
                <div className="page-numbers">
                    {pageNumbers.map((page, index) => (
                        page === '...' ? (
                            <span key={index} className="page-ellipsis">...</span>
                        ) : (
                            <button
                                key={page}
                                className={`page-number ${currentPage === page ? 'active' : ''}`}
                                onClick={() => handlePageChange(page)}
                            >
                                {page}
                            </button>
                        )
                    ))}
                </div>
                
                <button 
                    className="pagination-arrow" 
                    onClick={() => handlePageChange(currentPage + 1)}
                    disabled={currentPage === totalPages}
                >
                    ‚Üí
                </button>
            </div>
        );
    };

    return (
        <>
            <title>–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ - DRUKARNYA</title>
            {isFiltersVisible && <div className="filters-overlay" onClick={toggleFiltersVisibility}></div>}
            
            <div className="catalog-page">
                <div className="catalog-header">
                    <div>
                        <h1>–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤</h1>
                    </div>
                    <button 
                        className="mobile-filters-toggle" 
                        onClick={toggleFiltersVisibility}
                        aria-label="–û—Ç–∫—Ä—ã—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"
                    >
                        <span className="filter-icon">‚öôÔ∏è</span>
                        –§–∏–ª—å—Ç—Ä—ã
                    </button>
                </div>
                
                <SearchBar onSearch={handleSearchChange} allProducts={[]} />

                <div className="catalog-content">
                    <aside className={`filters-panel ${isFiltersVisible ? 'visible' : ''}`}>
                        <div className="filters-header">
                            <h2>–§–∏–ª—å—Ç—Ä—ã</h2>
                            <button 
                                className="close-filters" 
                                onClick={toggleFiltersVisibility}
                                aria-label="–ó–∞–∫—Ä—ã—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"
                            >
                                √ó
                            </button>
                        </div>

                        {/* –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã */}
                        {(selectedCategories.length > 0 || minPrice || maxPrice || searchQuery) && (
                            <div className="active-filters">
                                <div className="active-filters-header">
                                    <h4>–ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã</h4>
                                    <button className="clear-all" onClick={clearAllFilters}>
                                        –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
                                    </button>
                                </div>
                                <div className="filter-tags">
                                    {selectedCategories.map(category => (
                                        <span key={category} className="filter-tag">
                                            {category}
                                            <button onClick={() => handleCategoryChange(category)}>√ó</button>
                                        </span>
                                    ))}
                                    {minPrice && (
                                        <span className="filter-tag">
                                            –æ—Ç {minPrice} ‚Ç¥
                                            <button onClick={() => setMinPrice('')}>√ó</button>
                                        </span>
                                    )}
                                    {maxPrice && (
                                        <span className="filter-tag">
                                            –¥–æ {maxPrice} ‚Ç¥
                                            <button onClick={() => setMaxPrice('')}>√ó</button>
                                        </span>
                                    )}
                                </div>
                            </div>
                        )}

                        {/* –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º */}
                        <div className="filter-group">
                            <h3>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</h3>
                            <div className="category-list">
                                {staticCategories.map(category => (
                                    <label key={category} className="category-item">
                                        <input
                                            type="checkbox"
                                            checked={selectedCategories.includes(category)}
                                            onChange={() => handleCategoryChange(category)}
                                        />
                                        <div className="custom-checkbox"></div>
                                        <span>{category}</span>
                                    </label>
                                ))}
                            </div>
                        </div>

                        {/* –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ */}
                        <div className="filter-group">
                            <h3>–¶–µ–Ω–∞, ‚Ç¥</h3>
                            <div className="price-filter">
                                <div className="price-inputs">
                                    <input 
                                        type="number" 
                                        placeholder="–æ—Ç" 
                                        value={minPrice}
                                        onChange={handleMinPriceChange}
                                        className="price-input"
                                        min="0"
                                    />
                                    <span className="price-separator">‚Äî</span>
                                    <input 
                                        type="number" 
                                        placeholder="–¥–æ" 
                                        value={maxPrice}
                                        onChange={handleMaxPriceChange}
                                        className="price-input"
                                        min="0"
                                    />
                                </div>
                            </div>
                        </div>
                    </aside>

                    <main className="product-grid">
                        <div className="products-header">
                            <div className="products-info">
                                <span className="products-count">
                                    {isLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : `–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${totalProducts}`}
                                </span>
                                {totalPages > 1 && (
                                    <span className="page-info">
                                        –°—Ç—Ä–∞–Ω–∏—Ü–∞ {currentPage} –∏–∑ {totalPages}
                                    </span>
                                )}
                            </div>
                            <div className="products-controls">
                                <select className="sort-by" value={sortBy} onChange={handleSortChange}>
                                    <option value="popular">–°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ</option>
                                    <option value="new">–°–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ</option>
                                    <option value="price_asc">–°–Ω–∞—á–∞–ª–∞ –¥–µ—à–µ–≤—ã–µ</option>
                                    <option value="price_desc">–°–Ω–∞—á–∞–ª–∞ –¥–æ—Ä–æ–≥–∏–µ</option>
                                    <option value="name_asc">–ü–æ –∞–ª—Ñ–∞–≤–∏—Ç—É (–ê-–Ø)</option>
                                    <option value="name_desc">–ü–æ –∞–ª—Ñ–∞–≤–∏—Ç—É (–Ø-–ê)</option>
                                </select>
                            </div>
                        </div>

                        <div className="products-grid">
                            {renderContent()}
                        </div>

                        {renderPagination()}
                    </main>
                </div>
            </div>
        </>
    );
};

export default CatalogPage;