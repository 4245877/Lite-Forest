// src/pages/ProfilePage.jsx
import React, { useEffect, useMemo, useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useAuth } from '../auth';
import styles from './ProfilePage.module.css';

const TABS = ['overview','orders','addresses'];
const getInitialTab = () => {
  if (typeof window === 'undefined') return 'overview';
  const h = window.location.hash?.slice(1);
  return TABS.includes(h) ? h : 'overview';
};

// –ü–æ–¥–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
const Overview = ({ user }) => (
  <section className={styles.section} aria-labelledby="tab-overview-label">
    <h2 id="tab-overview-label" className={styles.sectionTitle}>–û–≥–ª—è–¥</h2>
    <div className={styles.card}>
      <h3 className={styles.cardTitle}>–ü—Ä–æ—Ñ—ñ–ª—å</h3>
      <p><strong>–Ü–º‚Äô—è:</strong> {user?.name || '‚Äî'}</p>
      <p><strong>Email:</strong> {user?.email || '‚Äî'}</p>
      <Link to="/profile/edit" className={styles.btnPrimary}>–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å</Link>
    </div>
    <div className={styles.card}>
      <h3 className={styles.cardTitle}>–®–≤–∏–¥–∫—ñ –¥—ñ—ó</h3>
      <div className={styles.actionsRow}>
        <Link to="/orders" className={styles.action}>–ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</Link>
        <Link to="/favorites" className={styles.action}>–û–±—Ä–∞–Ω–µ</Link>
      </div>
    </div>
  </section>
);

const Orders = () => {
  // –¥–µ–º–æ-–¥–∞–Ω—ñ, –∑–∞–º—ñ–Ω–∏—Ç–∏ –¥–∞–Ω–∏–º–∏ –∑ API
  const demoOrders = [
    { id: 'ORD-1001', date: '2025-07-09', total: '‚Ç¥1 200', status: '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ' },
    { id: 'ORD-1005', date: '2025-08-02', total: '‚Ç¥450', status: '–í –æ–±—Ä–æ–±—Ü—ñ' },
  ];
  const empty = demoOrders.length === 0;

  return (
    <section className={styles.section} aria-labelledby="tab-orders-label">
      <h2 id="tab-orders-label" className={styles.sectionTitle}>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è</h2>
      {empty ? (
        <div className={styles.empty}>
          <div className={styles.emptyTitle}>–ó–∞–º–æ–≤–ª–µ–Ω—å —â–µ –Ω–µ–º–∞—î</div>
          <div className={styles.emptyText}>–ü–µ—Ä–µ–≥–ª—è–Ω—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–∞ –¥–æ–¥–∞–π –ø–µ—Ä—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.</div>
          <Link to="/catalog" className={styles.btnPrimary}>–î–æ –∫–∞—Ç–∞–ª–æ–≥—É</Link>
        </div>
      ) : (
        <ul className={styles.ordersList}>
          {demoOrders.map(o => (
            <li key={o.id} className={styles.orderItem}>
              <div className={styles.orderHead}>
                <strong>{o.id}</strong>
                <span className={styles.orderDate}>{o.date}</span>
              </div>
              <div className={styles.orderFoot}>
                <span className={styles.orderSum}>{o.total}</span>
                <span className={`${styles.status} ${styles.statusNeutral}`}>{o.status}</span>
                <Link to={`/orders/${o.id}`} className={styles.btnSmall}>–î–æ–∫–ª–∞–¥–Ω—ñ—à–µ</Link>
              </div>
            </li>
          ))}
        </ul>
      )}
    </section>
  );
};

const Addresses = () => (
  <section className={styles.section} aria-labelledby="tab-addresses-label">
    <h2 id="tab-addresses-label" className={styles.sectionTitle}>–ê–¥—Ä–µ—Å–∏ –¥–æ—Å—Ç–∞–≤–∫–∏</h2>
    <div className={styles.card}>
      <p className={styles.cardText}>–î–æ–¥–∞–π –∞–¥—Ä–µ—Å—É, —â–æ–± –æ—Ñ–æ—Ä–º–ª—é–≤–∞—Ç–∏ —à–≤–∏–¥—à–µ.</p>
      <Link to="/profile/addresses" className={styles.btnPrimary}>–ö–µ—Ä—É–≤–∞—Ç–∏ –∞–¥—Ä–µ—Å–∞–º–∏</Link>
    </div>
  </section>
);

const ProfilePage = () => {
  const [tab, setTab] = useState(getInitialTab);
  const { user, loading, signout } = useAuth();
  const navigate = useNavigate();

  useEffect(() => {
    if (typeof window !== 'undefined') {
      window.history.replaceState(null, '', `#${tab}`);
    }
  }, [tab]);

  const displayName = user?.name || '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á';
  const firstLetter = useMemo(
    () => displayName?.trim()?.[0]?.toUpperCase() || 'üôÇ',
    [displayName]
  );

  const handleLogout = async () => {
    await signout();
    navigate('/', { replace: true });
  };

  if (loading) {
    return (
      <div className={styles.container}>
        <div className={styles.headerRow}>
          <h1 className={styles.title}>–û—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç</h1>
          <div className={styles.smallNote}>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è‚Ä¶</div>
        </div>
        <div className={styles.skeletonGrid}>
          <div className={styles.skeletonCard} />
          <div className={styles.skeletonMain} />
        </div>
      </div>
    );
  }

  if (!user) {
    return (
      <div className={styles.container}>
        <div className={styles.headerRow}>
          <h1 className={styles.title}>–û—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç</h1>
          <div className={styles.smallNote}>
            –í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ. <Link to="/login" className={styles.linkInline}>–£–≤—ñ–π—Ç–∏</Link>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className={styles.container}>
      <div className={styles.headerRow}>
        <h1 className={styles.title}>–û—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç</h1>
        <div className={styles.smallNote}>
          –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, <strong>{displayName.split(' ')[0]}</strong>
        </div>
      </div>

      <div className={styles.grid}>
        <aside className={styles.sidebar} aria-labelledby="account-nav-label">
          <div className={styles.userCard}>
            <div className={styles.avatar} aria-hidden>{firstLetter}</div>
            <div className={styles.userInfo}>
              <div className={styles.userName}>{displayName}</div>
              <div className={styles.userEmail}>{user.email}</div>
            </div>
          </div>

          <nav
            className={styles.menu}
            aria-label="–ü–∞–Ω–µ–ª—å –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó"
            role="tablist"
          >
            <button
              type="button"
              role="tab"
              aria-selected={tab === 'overview'}
              aria-controls="tab-overview"
              onClick={() => setTab('overview')}
              className={`${styles.menuItem} ${tab === 'overview' ? styles.active : ''}`}
            >
              –û–≥–ª—è–¥
            </button>
            <button
              type="button"
              role="tab"
              aria-selected={tab === 'orders'}
              aria-controls="tab-orders"
              onClick={() => setTab('orders')}
              className={`${styles.menuItem} ${tab === 'orders' ? styles.active : ''}`}
            >
              –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è
            </button>
            <button
              type="button"
              role="tab"
              aria-selected={tab === 'addresses'}
              aria-controls="tab-addresses"
              onClick={() => setTab('addresses')}
              className={`${styles.menuItem} ${tab === 'addresses' ? styles.active : ''}`}
            >
              –ê–¥—Ä–µ—Å–∏
            </button>

            <Link to="/favorites" className={styles.menuItemLink}>–û–±—Ä–∞–Ω–µ</Link>
            <Link to="/profile/settings" className={styles.menuItemLink}>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</Link>
            <Link to="/" className={styles.menuItemLink}>–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–∞–≥–∞–∑–∏–Ω—É</Link>

            <button type="button" onClick={handleLogout} className={`${styles.menuItem} ${styles.logout}`}>
              –í–∏–π—Ç–∏
            </button>
          </nav>
        </aside>

        <main className={styles.main}>
          <div
            id="tab-overview"
            role="tabpanel"
            hidden={tab !== 'overview'}
            aria-labelledby="tab-overview-label"
          >
            <Overview user={user} />
          </div>
          <div
            id="tab-orders"
            role="tabpanel"
            hidden={tab !== 'orders'}
            aria-labelledby="tab-orders-label"
          >
            <Orders />
          </div>
          <div
            id="tab-addresses"
            role="tabpanel"
            hidden={tab !== 'addresses'}
            aria-labelledby="tab-addresses-label"
          >
            <Addresses />
          </div>
        </main>
      </div>
    </div>
  );
};

export default ProfilePage;
