// FILE: src/pages/CartPage.jsx
import React, { useEffect, useMemo, useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import styles from './CartPage.module.css';
import { useCart } from '../contexts/CartContext.jsx';
import { useAuth } from '../auth/index.jsx';

const FREE_SHIPPING_THRESHOLD = 1599;
const DEFAULT_SHIPPING = 50;

export default function CartPage() {
  const { items: cart, inc, dec, remove, subtotal, checkout } = useCart();
  const { user } = useAuth();
  const navigate = useNavigate();

  const [recommended] = useState([
    { id: 'demo-r-1', name: '–ù–∞–±–æ—Ä –∫—Ä–∞—Å–æ–∫, 6 —à—Ç.', image: '/assets/products/paint-set.jpg', price: 120 },
    { id: 'demo-r-2', name: '–ö–∏—Å—Ç—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π', image: '/assets/products/brush.jpg', price: 60 },
  ]);

  const [promoOpen, setPromoOpen] = useState(false);
  const [promoCode, setPromoCode] = useState('');
  const [appliedPromo, setAppliedPromo] = useState(null);
  const [reserveSeconds, setReserveSeconds] = useState(15 * 60);

  useEffect(() => {
    const t = setInterval(() => setReserveSeconds(s => (s > 0 ? s - 1 : 0)), 1000);
    return () => clearInterval(t);
  }, []);

  const shipping = subtotal >= FREE_SHIPPING_THRESHOLD ? 0 : DEFAULT_SHIPPING;

  const promoDiscount = useMemo(() => {
    if (!appliedPromo) return 0;
    if (appliedPromo.code === 'SAVE50') return 50;
    if (appliedPromo.code === 'PERC10') return Math.round(subtotal * 0.1);
    return 0;
  }, [appliedPromo, subtotal]);

  const total = Math.max(0, subtotal + shipping - promoDiscount);
  const amountToFree = Math.max(0, FREE_SHIPPING_THRESHOLD - subtotal);
  const progressPct = Math.min(100, Math.round((subtotal / FREE_SHIPPING_THRESHOLD) * 100));

  function applyPromo(e) {
    e.preventDefault();
    const code = promoCode.trim().toUpperCase();
    if (code === 'SAVE50' || code === 'PERC10') {
      setAppliedPromo({ code });
      setPromoOpen(false);
    } else {
      alert('–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  }

  async function handleCheckout() {
    try {
      if (!user) {
        // –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–∞ login –∏ –≤–µ—Ä–Ω–µ–º—Å—è –Ω–∞–∑–∞–¥
        navigate('/login', { replace: false, state: { from: '/cart' } });
        return;
      }
      const order = await checkout({
        shipping_method: 'pickup',
        payment_provider: 'cod',
        notes: appliedPromo ? `promo:${appliedPromo.code}` : undefined,
      });
      // –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É "—Å–ø–∞—Å–∏–±–æ" –∏ –ø–µ—Ä–µ–π—Ç–∏ —Ç—É–¥–∞
      alert(`–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω: ${order.id}`);
      navigate(`/orders/${order.id}`, { replace: false });
    } catch (e) {
      alert(e.message || '–ü–æ–º–∏–ª–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è');
    }
  }

  // Helper: format MM:SS
  const reserveTimeFormatted = (() => {
    const mm = String(Math.floor(reserveSeconds / 60)).padStart(2, '0');
    const ss = String(reserveSeconds % 60).padStart(2, '0');
    return `${mm}:${ss}`;
  })();

  return (
    <div className={styles.container}>
      {/* Top motivator */}
      <div className={styles.motivator}>
        <div className={styles.titleRow}>
          <h1 className={styles.title}>–í–∞—à–∞ –ö–æ—Ä–∑–∏–Ω–∞</h1>
          <div className={styles.reserveNote}>
            –¢–æ–≤–∞—Ä—ã –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –≤–∞—Å –Ω–∞ <strong>{reserveTimeFormatted}</strong>
          </div>
        </div>

        <div className={styles.freeShippingRow}>
          <div className={styles.progressWrap} aria-hidden>
            <div className={styles.progressBar}>
              <div
                className={styles.progressFill}
                style={{
                  width: `${progressPct}%`,
                  backgroundColor: subtotal >= FREE_SHIPPING_THRESHOLD ? '#2b8a3e' : '#f39c12'
                }}
              />
            </div>
            <div className={styles.progressText}>
              {subtotal >= FREE_SHIPPING_THRESHOLD ? (
                <span>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –±–µ—Å–ø–ª–∞—Ç–Ω–æ!</span>
              ) : (
                <span>–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä–æ–≤ –µ—â—ë –Ω–∞ <strong>{amountToFree} –≥—Ä–Ω</strong> –¥–ª—è –ë–ï–°–ü–õ–ê–¢–ù–û–ô –¥–æ—Å—Ç–∞–≤–∫–∏!</span>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Main two-column area */}
      <div className={styles.grid}>
        <div className={styles.left}>
          <h2 className={styles.sectionTitle}>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞</h2>

          {cart.length === 0 ? (
            <div className={styles.emptyState}>
              <p>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.</p>
              <Link to="/catalog" className={styles.linkBtn}>–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥</Link>
            </div>
          ) : (
            <ul className={styles.cartList}>
              {cart.map((item) => (
                <li key={item.id} className={styles.cartItem}>
                  <img src={item.image} alt={item.name} className={styles.thumb} />
                  <div className={styles.itemBody}>
                    <Link to={`/products/${item.id}`} className={styles.itemTitle}>{item.name}</Link>
                    <div className={styles.qtyRow}>
                      <div className={styles.qtyControls}>
                        <button aria-label="–£–º–µ–Ω—å—à–∏—Ç—å" onClick={() => dec(item.id)} className={styles.qtyBtn}>-</button>
                        <input className={styles.qtyInput} value={item.qty} readOnly aria-label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ" />
                        <button aria-label="–£–≤–µ–ª–∏—á–∏—Ç—å" onClick={() => inc(item.id)} className={styles.qtyBtn}>+</button>
                      </div>
                      <div className={styles.itemPrice}>
                        {item.qty} √ó {item.price} –≥—Ä–Ω = <strong>{item.qty * item.price} –≥—Ä–Ω</strong>
                      </div>
                    </div>
                    <div className={styles.itemActions}>
                      <button onClick={() => remove(item.id)} className={styles.linkAction}>–£–¥–∞–ª–∏—Ç—å</button>
                    </div>
                  </div>
                </li>
              ))}
            </ul>
          )}

          {/* Upsell / recommendations (–¥–µ–º–æ) */}
          <section className={styles.recoSection} aria-label="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏">
            <h3>–° —ç—Ç–∏–º —á–∞—Å—Ç–æ –ø–æ–∫—É–ø–∞—é—Ç</h3>
            <div className={styles.recoRow}>
              {recommended.map((r) => (
                <div key={r.id} className={styles.recoCard}>
                  <img src={r.image} alt={r.name} />
                  <div className={styles.recoInfo}>
                    <div className={styles.recoTitle}>{r.name}</div>
                    <div className={styles.recoPrice}>{r.price} –≥—Ä–Ω</div>
                    {/* –¥–ª—è –¥–µ–º–æ ‚Äî –¥–æ–±–∞–≤–∏–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –≤ –∫–∞—Ç–∞–ª–æ–≥ */}
                    <Link to="/catalog" className={styles.addBtn}>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å</Link>
                  </div>
                </div>
              ))}
            </div>
          </section>
        </div>

        <aside className={styles.right}>
          <div className={styles.summaryCard}>
            <h3>–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞</h3>
            <div className={styles.row}>
              <span>–¢–æ–≤–∞—Ä—ã ({cart.reduce((s, it) => s + it.qty, 0)} —à—Ç.)</span>
              <span>{subtotal} –≥—Ä–Ω</span>
            </div>
            <div className={styles.row}>
              <span>–î–æ—Å—Ç–∞–≤–∫–∞</span>
              <span>{shipping === 0 ? '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ' : `${shipping} –≥—Ä–Ω`}</span>
            </div>

            {appliedPromo && (
              <div className={styles.row}>
                <span>–ü—Ä–æ–º–æ–∫–æ–¥ ({appliedPromo.code})</span>
                <span>-{promoDiscount} –≥—Ä–Ω</span>
              </div>
            )}

            <div className={styles.totalRow}>
              <strong>–ò—Ç–æ–≥–æ</strong>
              <strong>{Math.max(0, subtotal + shipping - promoDiscount)} –≥—Ä–Ω</strong>
            </div>

            <div className={styles.promoLinkWrap}>
              {!promoOpen ? (
                <button className={styles.promoLink} onClick={() => setPromoOpen(true)}>–£ –º–µ–Ω—è –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥</button>
              ) : (
                <form onSubmit={applyPromo} className={styles.promoForm}>
                  <input
                    value={promoCode}
                    onChange={(e) => setPromoCode(e.target.value)}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥"
                    aria-label="–ü—Ä–æ–º–æ–∫–æ–¥"
                  />
                  <button type="submit" className={styles.applyBtn}>–ü—Ä–∏–º–µ–Ω–∏—Ç—å</button>
                </form>
              )}
            </div>

            <button
              className={styles.checkoutBtn}
              disabled={cart.length === 0}
              onClick={handleCheckout}
            >
              –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é
            </button>

            <div className={styles.trustBlock}>
              <div className={styles.trustRow}>
                <div className={styles.trustIcons} aria-hidden>
                  <svg width="36" height="24" viewBox="0 0 24 24"><rect x="1" y="4" width="22" height="14" rx="2" stroke="#999" fill="none"/></svg>
                  <svg width="36" height="24" viewBox="0 0 24 24"><circle cx="12" cy="8" r="2" stroke="#999" fill="none"/></svg>
                </div>
                <div className={styles.trustText}>
                  <strong>–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–¥–µ–ª–∫–∞</strong><br/>
                  <a href="/delivery" className={styles.trustLink}>–£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞</a>
                </div>
              </div>
            </div>
          </div>
        </aside>
      </div>
    </div>
  );
}
